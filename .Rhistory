.opts=list(httpheader = hdr,
postfields = flds))
httr::content(response)
appIndex_url <- paste0(srv_url, '/api/apps/index')
headers <- c('Accept'        = '*/*',
'Content-Type'  = 'application/json',
'Authorization' = paste('Bearer', token))
response <- RCurl::getURI(appIndex_url,
.opts = list(httpheader = headers))
response
srv_url <- 'http://data-vault.eu:8080'
auth_url <- paste0(srv_url, '/oauth/token')
response <- RCurl::postForm(auth_url,
email      = 'christoph.fabianek@gmail.com',
password   = 'qwertz',
grant_type = 'password')
srv_url <- 'http://data-vault.eu:8080'
auth_url <- paste0(srv_url, '/oauth/token')
response <- RCurl::postForm(auth_url,
email      = 'christoph.fabianek@gmail.com',
password   = 'asdf123',
grant_type = 'password')
token <- jsonlite::fromJSON(response[1])$access_token
newApp_url <- paste0(srv_url, '/api/apps/create')
hdr <- c(Authorization = paste('Bearer', token),
`Content-Type`="application/json")
flds <- jsonlite::toJSON(list(
source_url = "https://sam.datentresor.org/api/plugins/41",
type = "oyd_online_app"), auto_unbox = TRUE)
response <- RCurl::postForm(newApp_url,
.opts=list(httpheader = hdr,
postfields = flds))
response
appIndex_url <- paste0(srv_url, '/api/apps/index')
headers <- c('Accept'        = '*/*',
'Content-Type'  = 'application/json',
'Authorization' = paste('Bearer', token))
response <- RCurl::getURI(appIndex_url,
.opts = list(httpheader = headers))
response
srv_url <- 'https://lwp.data-vault.eu'
auth_url <- paste0(srv_url, '/oauth/token')
response <- RCurl::postForm(auth_url,
email      = 'christoph.fabianek@gmail.com',
password   = 'LWP_t1nAmETa',
grant_type = 'password')
token <- jsonlite::fromJSON(response[1])$access_token
newApp_url <- paste0(srv_url, '/api/apps/create')
hdr <- c(Authorization = paste('Bearer', token),
`Content-Type`="application/json")
flds <- jsonlite::toJSON(list(
source_url = "https://sam.datentresor.org/api/plugins/49",
type = "oyd_online_app"), auto_unbox = TRUE)
response <- RCurl::postForm(newApp_url,
.opts=list(httpheader = hdr,
postfields = flds))
appIndex_url <- paste0(srv_url, '/api/apps/index')
headers <- c('Accept'        = '*/*',
'Content-Type'  = 'application/json',
'Authorization' = paste('Bearer', token))
response <- RCurl::getURI(appIndex_url,
.opts = list(httpheader = headers))
response
token
getToken <- function(pia_url, app_key, app_secret) {
auth_url <- paste0(pia_url, '/oauth/token')
# reduce response timeout to 10s to avoid hanging app
# https://curl.haxx.se/libcurl/c/CURLOPT_CONNECTTIMEOUT.html
optTimeout <- RCurl::curlOptions(connecttimeout = 10)
response <- tryCatch(
RCurl::postForm(auth_url,
client_id     = app_key,
client_secret = app_secret,
grant_type    = 'client_credentials',
.opts         = optTimeout),
error = function(e) { return(NA) })
if (is.na(response)) {
return(NA)
} else {
if(jsonlite::validate(response[1])){
return(rjson::fromJSON(response[1])$access_token)
} else {
return(NA)
}
}
}
setupApp <- function(pia_url, app_key, app_secret, keyItems) {
app_token <- getToken(pia_url,
app_key,
app_secret)
if(is.na(app_token)){
list()
} else {
list('url'        = pia_url,
'app_key'    = app_key,
'app_secret' = app_secret,
'token'      = app_token,
'encryption' = keyItems)
}
}
defaultHeaders <- function(token) {
c('Accept'        = '*/*',
'Content-Type'  = 'application/json',
'Authorization' = paste('Bearer', token))
}
# URL to access a repo
itemsUrl <- function(url, repo_name) {
paste0(url, '/api/repos/', repo_name, '/items')
}
writeItem <- function(app, repo_url, item) {
headers <- defaultHeaders(app$token)
data <- jsonlite::toJSON(item, auto_unbox = TRUE)
response <- tryCatch(
RCurl::postForm(repo_url,
.opts=list(httpheader = headers,
postfields = data)),
error = function(e) {
return(e) })
if(!is.null(attr(response, "Content-Type"))){
response
} else {
errrorMessage <- tryCatch(
errrorMessage <- trimws(response$message),
error = function(e){
return("no error info")
})
response <- ''
attr(response, 'error') <- errrorMessage
response
}
}
updateItem <- function(app, repo_url, item, id) {
headers <- defaultHeaders(app$token)
data <- jsonlite::toJSON(item, auto_unbox = TRUE)
url <- paste0(repo_url, '/', id)
response <- tryCatch(
httr::PUT(url,
body = data,
encode = 'json',
httr::add_headers(.headers = headers)),
error = function(e) {
return(e) })
if(!is.null(attr(response, "Content-Type"))){
response
} else {
errrorMessage <- tryCatch(
errrorMessage <- trimws(response$message),
error = function(e){
return("no error info")
})
response <- ''
attr(response, 'error') <- errrorMessage
response
}
}
r2d <- function(response){
if (is.na(response)) {
data.frame()
} else {
if (nchar(response) > 0) {
retVal <- rjson::fromJSON(response)
if(length(retVal) == 0) {
data.frame()
} else {
if ('error' %in% names(retVal)) {
data.frame()
} else {
if (!is.null(retVal$message)) {
if (retVal$message ==
'error.accessDenied') {
data.frame()
} else {
# convert list to data.frame
jsonlite::fromJSON(response)
}
} else {
jsonlite::fromJSON(response)
}
}
}
} else {
data.frame()
}
}
}
readRawItems <- function(app, repo_url) {
headers <- defaultHeaders(app$token)
url_data <- paste0(repo_url, '?size=2000')
header <- RCurl::basicHeaderGatherer()
doc <- tryCatch(
RCurl::getURI(url_data,
.opts=list(httpheader = headers),
headerfunction = header$update),
error = function(e) { return(NA) })
response <- NA
respData <- data.frame()
if(!is.na(doc)){
if(header$value()[['status']] == '200'){
recs <- tryCatch(
as.integer(header$value()[['X-Total-Count']]),
error = function(e) { return(0) })
if(recs > 2000) {
page_count <- floor(recs/2000)
shiny::withProgress(message = tr('readDataProgressMsg'),
value = 0, {
for(page in 0:page_count){
url_data <- paste0(repo_url,
'?page=', page,
'&size=2000')
response <- tryCatch(
RCurl::getURL(
url_data,
.opts=list(httpheader=headers)),
error=function(e){ return(NA) })
subData <- r2d(response)
if(nrow(respData)>0){
respData <- rbind(respData,
subData)
} else {
respData <- subData
}
shiny::incProgress(1/page_count)
}
})
} else {
response <- tryCatch(
RCurl::getURL(
url_data,
.opts=list(httpheader=headers)),
error = function(e) { return(NA) })
respData <- r2d(response)
}
} else {
if(is.null(jsonlite::fromJSON(doc)$statusMessage)){
if(is.null(jsonlite::fromJSON(doc)$error)){
attr(respData, 'error') <-
jsonlite::fromJSON(doc)$message
} else {
attr(respData, 'error') <-
jsonlite::fromJSON(doc)$error
}
} else {
attr(respData, 'error') <-
jsonlite::fromJSON(doc)$statusMessage
}
}
}
respData
}
readItems <- function(app, repo_url) {
if (length(app) == 0) {
data.frame()
return()
}
respData <- readRawItems(app, repo_url)
if(nrow(respData) > 0){
if('version' %in% colnames(respData)){
if(respData[1, 'version'] == oydDataVersion){
oydDecrypt(app, repo_url, respData)
} else {
respData
}
} else {
respData
}
} else {
respData
}
}
deleteItem <- function(app, repo_url, id){
headers <- defaultHeaders(app$token)
item_url <- paste0(repo_url, '/', id)
response <- tryCatch(
httr::DELETE(item_url,
httr::add_headers(headers)),
error = function(e) { return(NA) })
if(!is.null(response$status_code)){
response$status_code
} else {
'unknown'
}
}
app <- setupApp('https://lwp.data-vault.eu',
'421d16f2bb906f5a2bea1b5043c1b16c13ba7142b941e5273684f75a2d7ea492',
'789e416cfcbba91223fd5cfb3409fe5c0acc82a785f7bfa927dddc54990ebcc0',
'')
app$token
url <- itemsUrl(app$url, 'eu.ownyourdata.room.office.temperature')
newItem <- list(value = 25)
retVal <- writeItem(app, url, newItem)
newItem <- list(value = 25,
created_at = "2017-11-19T:04:30:40+06:00")
retVal <- writeItem(app, url, newItem)
app_orig <- setupApp('https://demo.datentresor.org',
'eu.ownyourdata.room',
'6XUmKUm4jH4myUm1fMi1',
'')
app_orig$token
retVal <- readItems(app_orig$url, 'eu.ownyourdata.room.temp')
app_orig <- setupApp('https://demo.datentresor.org',
'eu.ownyourdata.room',
'6XUmKUm4jH4myUm1fMi1',
'')
orig_url <- itemsUrl(app_orig$url, 'eu.ownyourdata.room.temp')
retVal <- readItems(app_orig, orig_url)
View(retVal)
retVal[i1, 'value']
retVal[1, 'value']
as.POSIXct('1479591000', '%Y-%m-%dT%H:%M:%SZ', tz = 'UTC')
as.POSIXct(1479591000, '%Y-%m-%dT%H:%M:%SZ', tz = 'UTC')
as.POSIXct(1479591000, origin="1970-01-01")
as.POSIXct(1479591000, origin="1970-01-01", '%Y-%m-%dT%H:%M:%SZ')
as.POSIXct(1479591000, origin="1970-01-01", '%Y-%m-%dT%H:%M:%SZ', tz = 'UTC')
as.POSIXct(1479591000, origin='1970-01-01')
as.POSIXct(1479591000, '%Y-%m-%dT%H:%M:%SZ', origin='1970-01-01')
?as.POSIXct
as.POSIXct(1479591000, tz='UTC', origin='1970-01-01')
as.POSIXct(1479591000, tz='UTC', origin='1970-01-01', format='%Y-%m-%dT%H:%M:%SZ')
as.POSIXct(1479591000, tz='UTC', origin='1970-01-01')
as.POSIXct(1479591000, tz='UTC', origin='1970-01-01', format='%Y-%m-%d')
as.POSIXct(1479591000, tz='UTC', origin='1970-01-01')
format(as.POSIXct(1479591000, tz='UTC', origin='1970-01-01'), '%Y-%m-%dT%H:%M:%SZ')
format(as.POSIXct(retVal[1, 'timestamp']), tz='UTC', origin='1970-01-01'), '%Y-%m-%dT%H:%M:%SZ')
format(as.POSIXct(retVal[1, 'timestamp'], tz='UTC', origin='1970-01-01'), '%Y-%m-%dT%H:%M:%SZ')
format(as.POSIXct(retVal[2, 'timestamp'], tz='UTC', origin='1970-01-01'), '%Y-%m-%dT%H:%M:%SZ')
app <- setupApp('https://lwp.data-vault.eu',
'421d16f2bb906f5a2bea1b5043c1b16c13ba7142b941e5273684f75a2d7ea492',
'789e416cfcbba91223fd5cfb3409fe5c0acc82a785f7bfa927dddc54990ebcc0',
'')
url <- itemsUrl(app$url, 'eu.ownyourdata.room.office.temperature')
for (i in 1:3){
newItem <- list(value = retVal[i, 'value'],
created_at = format(as.POSIXct(retVal[i, 'timestamp'], tz='UTC', origin='1970-01-01'), '%Y-%m-%dT%H:%M:%SZ'))
resp <- writeItem(app, url, newItem)
}
for (i in 1:nrow(retVal)){
newItem <- list(value = retVal[i, 'value'],
created_at = format(as.POSIXct(retVal[i, 'timestamp'], tz='UTC', origin='1970-01-01'), '%Y-%m-%dT%H:%M:%SZ'))
resp <- writeItem(app, url, newItem)
}
library(sodium)
keyStr <- 'secret'
unknown_private_key <- sha256(charToRaw(keyStr))
public_key <- pubkey(unknown_private_key)
public_key <- 'ae2f4b833d7ce8048e433e712d091e29b41393190dae51f84bf25b0f4bbf9dce'
public_key_raw <- as.raw(strtoi(sapply(seq(1, nchar(public_key), by=2),
function(x) substr(public_key, x, x+1)), 16L))
library(sodium)
public_key <- 'ae2f4b833d7ce8048e433e712d091e29b41393190dae51f84bf25b0f4bbf9dce'
public_key_raw <- as.raw(strtoi(sapply(seq(1, nchar(public_key), by=2),
function(x) substr(public_key, x, x+1)), 16L))
authentication_key <- sodium::sha256(charToRaw('auth'))
nonce <- sodium::random(24)
message <- '{"latitude”:40.75,"longitude”:73.98,"elevation”:160.34,"timestamp":"2017-12-28T16:49:22Z","datum":"EPSG:4326”}'
message_raw <- charToRaw(message)
cipher <- sodium::auth_encrypt(message_raw,
authentication_key,
public_key_raw,
nonce)
value <- paste0(as.hexmode(as.integer(cipher)), collapse = '')
nonce <- paste0(as.hexmode(as.integer(nonce)), collapse = '')
record <- jsonlite::toJSON(list(value   = value,
nonce   = nonce,
version = "0.4"),
auto_unbox = TRUE)
record
public_key_raw
?as.raw
?auth_encrypt
?sodium::data_encrypt
?sodium::nonce
?charToRaw
srv_url <- 'http://localhost:3005'
auth_url <- paste0(srv_url, '/oauth/token')
response <- RCurl::postForm(auth_url,
email      = 'christoph.fabianek@gmail.com',
password   = 'asdf123',
grant_type = 'password')
response
keyStr <- 'test'
prvKey<- sha256(charToRaw(keyStr))
pubkey <- pubkey(prvKey)
keyStr <- 'mobile'
prvKey<- sha256(charToRaw(keyStr))
pubkey <- pubkey(prvKey)
keyStr <- 'mobil'
prvKey<- sha256(charToRaw(keyStr))
pubkey <- pubkey(prvKey)
keyStr <- 'mobile'
prvKey<- sha256(charToRaw(keyStr))
pubkey <- pubkey(prvKey)
keyStr <- 'mobile'
prvKey<- sha256(charToRaw(keyStr))
pubkey <- pubkey(prvKey)
paste(as.character(pubkey), collapse='')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
message <- '{"latitude”:40.75846,"longitude”:73.92248,"elevation”:160.34,"timestamp":"2017-12-28T16:49:22Z","datum":"EPSG:4326”}'
source('~/.active-rstudio-document')
record
source('~/oyd/oydapp/R/srvBase.R')
app <- setupApp("https://mobile-api.data-vault.eu", "8ac6377e5697123aa18f8bca860f3bd2d8db6ec54002cc3becbdce9b1ac97943", "95f1ea7336476d2d6c9b352c75d7bad1d2de0d3c456b973d3e9ffae4e00a1694", '')
View(defaultHeaders)
View(oydDecrypt)
View(app)
rep_url <- itemsUrl(app$url, 'eu.ownyourdata.location')
repo_url <- itemsUrl(app$url, 'eu.ownyourdata.location')
rm(rep_url)
items <- readItems(app, repo_url)
source('~/oyd/oydapp/R/general.R')
source('~/oyd/oydapp/R/srvHelper.R')
items <- readItems(app, repo_url)
View(getReadKey)
View(getKey)
load("~/oyd/app-location/tmpApp.RData")
respData <- readRawItems(app, repo_url)
View(respData)
nrow(respData)
'version' %in% colnames(respData)
respData[1, 'version']
respData[1, 'version'] == oydDataVersion
oydDecrypt(app, repo_url, respData)
app
repo_url
respData
'version' %in% colnames(respData)
respData[1, 'version'] == oydDataVersion
x <- respData[1, 'version'] == oydDataVersion
x == TRUE
if(respData[1, 'version'] == oydDataVersion){ cat("yes") } else { cat("no")}
repo_url
data <- respData
privateKey <- getReadKey(app$encryption,
repoFromUrl(repo_url))
errorMsg <- ''
warningMsg <- ''
retVal <- data.frame()
length(privateKey)
anyNA(data$nonce)
authKey <- sodium::pubkey(
sodium::sha256(charToRaw('auth')))
decryptError <- FALSE
data$json <- tryCatch(
apply(data, 1, function(x) {
cipher <- str2raw(as.character(
x['value']))
nonce <- str2raw(as.character(
x['nonce']))
rawToChar(sodium::auth_decrypt(
cipher,
privateKey,
authKey,
nonce))
}),
error = function(e) {
decryptError <<- TRUE
return(NA) })
data$json
decryptError
nchar(errorMsg)
parseError <- FALSE
retVal <- tryCatch(
do.call(rbind.data.frame,
lapply(data$json,
function(x) jsonlite::fromJSON(x))),
error = function(e) {
parseError <<- TRUE
return(data.frame()) })
do.call(rbind.data.frame,
lapply(data$json,
function(x) jsonlite::fromJSON(x)))
data$json
items <- readItems(app, repo_url)
)
items <- readItems(app, repo_url)
View(items)
# erzeuge key
keyStr <- 'secret'
private_key <- sodium::sha256(charToRaw(keyStr))
public_key <- sodium::pubkey(private_key)
auth_private_key <- sha256(charToRaw('auth'))
auth_private_key <- sodium::sha256(charToRaw('auth'))
nonce <- random(24)
nonce <- sodium::random(24)
message <- "{\"address1\":\"M.Scherz-Str 14\",\"city\":\"Bad Vöslau\",\"zipcode\":\"2540\",\"country\":\"Austria\"}"
msg <- charToRaw(message)
cipher <- auth_encrypt(msg, auth_private_key, public_key, nonce)
cipher <- sodium::auth_encrypt(msg, auth_private_key, public_key, nonce)
jsonlite::toJSON(list(
value = paste0(as.hexmode(as.integer(cipher)), collapse = ''),
nonce = paste0(as.hexmode(as.integer(nonce)), collapse = '')), auto_unbox = T)
source('~/oyd/oydapp/R/srvHelper.R')
raw2str(public_key)
raw2str(private_key)
library(oydapp)
??rintrojs
library(oydapp)
library(oydapp)
library(oydapp)
??createDigest
??unite_
??digest
library(oydapp)
data <- null
data <- NULL
nrow(data)
(nrow(data)>0)
if (nrow(data)>0) {
cat("yes")
}
length(data)
library(oydapp)
