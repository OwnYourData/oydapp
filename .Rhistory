keyStr <- 'user_a'
private_key <- sha256(charToRaw(keyStr))
verify_public_key <- pubkey(unknown_private_key)
verify_public_key == public_key
all.equal(verify_public_key == public_key)
all.equal(verify_public_key == public_key)
library(sodium)
str2raw <- function(str){
if(grepl("^[0-9a-f]+$", str, perl = TRUE)){
as.raw(strtoi(sapply(
seq(1, nchar(str), by=2),
function(x) substr(str, x, x+1)), 16L))
} else {
raw(0)
}
}
# encrypt
message <- '{"accuracy":15.170000076293945,"altitude":403,"latitude":47.0518283,"longitude":15.4019977,"speed":1.2100000381469727,"timestamp":"2018-02-27T06:07:46.000Z","heading":89,"datum":"EPSG:4326"}'
nonce_str <- '5e96726a37d1dd89c4cdefbfe4a247d823b20441ffec46b8'
nonce <- str2raw(nonce_str)
public_key_str <- 'c2c45a740316583c8b1af013e24c66711590f1f1921cbc8ee2c8be9188b13731'
public_key <- str2raw(public_key_str)
auth_private_key <- sha256(charToRaw('auth'))
auth_private_key <- sha256(charToRaw('auth'))
authentication_key_str <- 'bdf49c3c3882102fc017ffb661108c63a836d065888a4093994398cc55c2ea2f'
authentication_key <- str2raw(authentication_key_str)
auth_private_key == authentication_key
msg <- charToRaw(message)
msg
raw2str <- function(key){
paste(as.character(key), collapse='')
}
raw2str(msg)
cipher <- auth_encrypt(msg, auth_private_key, public_key, nonce)
raw2str(cipher)
library(sodium)
raw2str <- function(key){
paste(as.character(key), collapse='')
}
str2raw <- function(str){
if(grepl("^[0-9a-f]+$", str, perl = TRUE)){
as.raw(strtoi(sapply(
seq(1, nchar(str), by=2),
function(x) substr(str, x, x+1)), 16L))
} else {
raw(0)
}
}
# encrypt
message1 <- '{"accuracy":15.170000076293945,"altitude":403,"latitude":47.0518283,"longitude":15.4019977,"speed":1.2100000381469727,"timestamp":"2018-02-27T06:07:46.000Z","heading":89,"datum":"EPSG:4326"}'
nonce_str <- '5e96726a37d1dd89c4cdefbfe4a247d823b20441ffec46b8'
nonce1 <- str2raw(nonce_str)
public_key_str <- 'c2c45a740316583c8b1af013e24c66711590f1f1921cbc8ee2c8be9188b13731'
public_key <- str2raw(public_key_str)
keyStr <- 'user_a'
private_key <- sha256(charToRaw(keyStr))
verify_public_key <- pubkey(unknown_private_key)
keyStr <- 'user_a'
private_key <- sha256(charToRaw(keyStr))
verify_public_key <- pubkey(private_key)
public_key == verify_public_key
authentication_key_str <- 'bdf49c3c3882102fc017ffb661108c63a836d065888a4093994398cc55c2ea2f'
authentication_key <- str2raw(authentication_key_str)
verify_authentication_key <- sha256(charToRaw('auth'))
authentication_key == verify_authentication_key
msg1 <- charToRaw(message1)
msg1
raw2str(msg1)
cipher1 <- auth_encrypt(msg1, auth_private_key, public_key, nonce2)
cipher1 <- auth_encrypt(msg1, authentication_key, public_key, nonce2)
cipher1 <- auth_encrypt(msg1, authentication_key, public_key, nonce1)
jsonlite::toJSON(list(
value = paste0(as.hexmode(as.integer(cipher1)), collapse = ''),
nonce = paste0(as.hexmode(as.integer(nonce1)), collapse = '')), auto_unbox = T)
message2 <- '{"accuracy":20,"altitude":1,"latitude":15.4288967,"longitude":47.0700467,"speed":0,"timestamp":"2018-02-23T09:12:05.000Z","heading":0,"datum":"EPSG:4326"}'
nonce_str <- 'e9f32dedfb4900fd931f988a082e3cef80f77fad548820fb'
nonce2 <- str2raw(nonce_str)
msg2 <- charToRaw(message2)
raw2str(msg2)
# encrypt
message1 <- '{"accuracy":15.170000076293945,"altitude":403,"latitude":47.0518283,"longitude":15.4019977,"speed":1.2100000381469727,"timestamp":"2018-02-27T06:07:46.000Z","heading":89,"datum":"EPSG:4326"}'
msg1 <- charToRaw(message1)
raw2str(msg1)
message2 <- '{"accuracy":20,"altitude":1,"latitude":15.4288967,"longitude":47.0700467,"speed":0,"timestamp":"2018-02-23T09:12:05.000Z","heading":0,"datum":"EPSG:4326"}'
msg2 <- charToRaw(message2)
raw2str(msg2)
nonce_str2 <- 'e9f32dedfb4900fd931f988a082e3cef80f77fad548820fb'
nonce2 <- str2raw(nonce_str2)
cipher2 <- auth_encrypt(msg2, auth_private_key, public_key, nonce2)
nonce_str2 <- 'e9f32dedfb4900fd931f988a082e3cef80f77fad548820fb'
nonce2 <- str2raw(nonce_str2)
cipher2 <- auth_encrypt(msg2, authentication_key, public_key, nonce2)
jsonlite::toJSON(list(
value = paste0(as.hexmode(as.integer(cipher2)), collapse = ''),
nonce = paste0(as.hexmode(as.integer(nonce2)), collapse = '')), auto_unbox = T)
# decrypt
input <- '{"value":"1c1d520a25dab8bd6df1003e416a967f8d10d1cda157e3369de8b8d9a590df59e22f07e9aff5750428861a5721805975f3f9a253e0eac814d1e0a8069b8e745f9b7f27f0e9ab37c3ccbf54cdd2d2b86105842143ffa3d3fcac6f273f591e7c5630972774eab245f9b07aab1aa9d0dc43e0f93921f68a5b2faee56c8d53bf428a106e488f0808a9cc2abdac56235f94de13a42aaca7273168ae081c2e36edf15ad5868af38bb64e4dade9","nonce":"e9f32dedfb4900fd931f988a082e3cef80f77fad548820fb","version":"0.4"}'
cipherHex <- jsonlite::fromJSON(input)$value
nonceHex <- jsonlite::fromJSON(input)$nonce
keyStr <- 'user_a'
private_key <- sha256(charToRaw(keyStr))
public_key <- pubkey(private_key)
auth_private_key <- sha256(charToRaw('auth'))
auth_key <- pubkey(auth_private_key)
nonce <- as.raw(strtoi(sapply(
seq(1, nchar(nonceHex), by=2),
function(x) substr(nonceHex, x, x+1)), 16L))
cipher <- as.raw(strtoi(sapply(
seq(1, nchar(cipherHex), by=2),
function(x) substr(cipherHex, x, x+1)), 16L))
decrypted_message <- rawToChar(auth_decrypt(cipher, private_key, auth_key, nonce))
decrypted_message
input <- "{\"value\":\"4c0273cbe22c5b92a985cbd5737bd05370f1871744074dbfcd277274fa77b7cf009f011ac795223f84bacc0eac5a683217e8e69855\",\"nonce\":\"17a4439e57fa7ac3b556d32caa91fa9db4ded39f358046bb\"}"
cipherHex <- jsonlite::fromJSON(input)$value
nonceHex <- jsonlite::fromJSON(input)$nonce
keyStr <- 'asdf123'
private_key <- sha256(charToRaw(keyStr))
auth_private_key <- sha256(charToRaw('auth'))
auth_key <- pubkey(auth_private_key)
nonce <- as.raw(strtoi(sapply(
seq(1, nchar(nonceHex), by=2),
function(x) substr(nonceHex, x, x+1)), 16L))
cipher <- as.raw(strtoi(sapply(
seq(1, nchar(cipherHex), by=2),
function(x) substr(cipherHex, x, x+1)), 16L))
decrypted_message <- rawToChar(auth_decrypt(cipher, private_key, auth_key, nonce))
cipherHex
nonceHex
keyStr <- 'asdf123'
private_key <- sha256(charToRaw(keyStr))
sodium::pubkey(private_key)
pub_key <- sodium::pubkey(private_key)
raw2str(pub_key)
raw2str(private_key)
input <- "{\"value\":\"f5c6807b198ad264e397f94dd422288ab79085c56e4db74cff82d054f55654ea2b8e7024ff4ee9fb44175fe8d671d708df8e2e02c5\",\"nonce\":\"01068430fefef164cc63c0c3cb164d05a2b640cdd590d7aa\"}"
cipherHex <- jsonlite::fromJSON(input)$value
nonceHex <- jsonlite::fromJSON(input)$nonce
keyStr <- 'asdf123'
private_key <- sha256(charToRaw(keyStr))
auth_private_key <- sha256(charToRaw('auth'))
auth_key <- pubkey(auth_private_key)
nonce <- as.raw(strtoi(sapply(
seq(1, nchar(nonceHex), by=2),
function(x) substr(nonceHex, x, x+1)), 16L))
cipher <- as.raw(strtoi(sapply(
seq(1, nchar(cipherHex), by=2),
function(x) substr(cipherHex, x, x+1)), 16L))
decrypted_message <- rawToChar(auth_decrypt(cipher, private_key, auth_key, nonce))
decrypted_message
input <- '{"value":"mGlUUpMaX7G5QWP/cCxlV9iiNwZMAlE9rOtBPVJ2KF5d5sof6Thlc5+23NYFAhqkXe9aph2Ebc3KhNsLQ3zUZcHqwM/bFtrgXWjpRIo1dxCyswcAhc7I+raOoRNpWaW0AD9wRzJdLF6d6dUApmhJaKnybF6H2bT7KWOu30/fU+b3pwJ+UM1CyU48Oiu5om57R5PZY3vLFreGK24nu9RSnURYRFQ71oocgw==","nonce":"wsWbBZxNJ0q1MbaP2WcXQF9ZPqr23is6","version":"0.4","id":51}'
library(sodium)
input <- '{"value":"mGlUUpMaX7G5QWP/cCxlV9iiNwZMAlE9rOtBPVJ2KF5d5sof6Thlc5+23NYFAhqkXe9aph2Ebc3KhNsLQ3zUZcHqwM/bFtrgXWjpRIo1dxCyswcAhc7I+raOoRNpWaW0AD9wRzJdLF6d6dUApmhJaKnybF6H2bT7KWOu30/fU+b3pwJ+UM1CyU48Oiu5om57R5PZY3vLFreGK24nu9RSnURYRFQ71oocgw==","nonce":"wsWbBZxNJ0q1MbaP2WcXQF9ZPqr23is6","version":"0.4","id":51}'
cipherHex <- jsonlite::fromJSON(input)$value
nonceHex <- jsonlite::fromJSON(input)$nonce
keyStr <- 'user_a'
private_key <- sha256(charToRaw(keyStr))
auth_private_key <- sha256(charToRaw('auth'))
auth_key <- pubkey(auth_private_key)
nonce <- as.raw(strtoi(sapply(
seq(1, nchar(nonceHex), by=2),
function(x) substr(nonceHex, x, x+1)), 16L))
cipher <- as.raw(strtoi(sapply(
seq(1, nchar(cipherHex), by=2),
function(x) substr(cipherHex, x, x+1)), 16L))
nonce <- as.raw(strtoi(sapply(
seq(1, nchar(nonceHex), by=2),
function(x) substr(nonceHex, x, x+1)), 16L))
nonceHex
cipher <- as.raw(strtoi(sapply(
seq(1, nchar(cipherHex), by=2),
function(x) substr(cipherHex, x, x+1)), 16L))
nonceHex
cipherHex
input <- '{"value":"1846d001ccd9f8e849fcac28ba0d324704420b12a042357d2365753977618ee186a4b45bdb651bdf86fa3c6f3f99203531480eb078a63c441180cb34c382523e6230f29fcf47462c6a3869d42401341c0429ad19c03299f67adad5d3a4da34665ededc040101e773b663e84230d311bc8fea69fd2d77cbb42e9a975bf691bf54c12263a87cbfa3bc80fbacae7616608e079da4b71374a94506b4b829b503436775a2f8874d6f6a69728ddde3d39e68313e19f75a72472863cecca939d22c79a070f2d20a060fc3bd132de1218f61cbac6c38968644b94bdb11ecbd6cac6bc3545e7b555599f2c64c56174693133a8a4d8a3c6bc70773961cb614b434252d92f73ad98bee41070f0435e120de735baefbe2e97a1d290948bf04df64cf030943abc776cecd130b8e90879dd3df7fff48d1cc1b6f6cb255a0c66bd17572b7cd22206e9a8077","nonce":"5b09339cb5ad433f9d2e579d82fc0623b0f02b21f1feffdc","version":"0.4","id":95}'
cipherHex <- jsonlite::fromJSON(input)$value
nonceHex <- jsonlite::fromJSON(input)$nonce
keyStr <- 'user_a'
private_key <- sha256(charToRaw(keyStr))
auth_private_key <- sha256(charToRaw('auth'))
auth_key <- pubkey(auth_private_key)
nonce <- as.raw(strtoi(sapply(
seq(1, nchar(nonceHex), by=2),
function(x) substr(nonceHex, x, x+1)), 16L))
cipher <- as.raw(strtoi(sapply(
seq(1, nchar(cipherHex), by=2),
function(x) substr(cipherHex, x, x+1)), 16L))
decrypted_message <- rawToChar(auth_decrypt(cipher, private_key, auth_key, nonce))
keyStr <- 'user_a'
private_key <- sha256(charToRaw(keyStr))
public_key <- sodium::pubkey(private_key)
public_key
input <- '{"value":"0584e61e77934fba020d458a4a728df2cee0ed461e8dd06fc9b2d6b77b8fb2e4eabf61993520d4e7d4ce056b396171624012aebb4db3bffec001d1ad10afa97b563ced058950f7860ff57579574df0cfa30c88237988736f54122d695ed50d88560f67e0a871c4eca187513d65a90bba684b5c4f4f481b6126cf12485c00b40ca243dd9803bfb91bd67b316aed357de34ea5521a8407246aa7dc841efa7a1cdfd178ebe91d78334134c7c7a05194a26fd8fc0729484a8e9559762092b688197283eec36baf3ddc159ca416f81d99ae348e4eeeacef539c2fcd5a8667e225ba17ed15f1acc10d4536d0954fac838cf9f0c14309dfaae1952ba26561e7ec55db66d08a428f0c25179947141366b7d62d2de59fc558dabcef9a8a23cf71e0b887e29ce58e3f459ee6f01d9009c6071cee6810e42f579aca627942503c37222be67c4d97707d","nonce":"747f4d5043c69db8de116c71e764e7894df30966622fc82a","version":"0.4","id":94}'
cipherHex <- jsonlite::fromJSON(input)$value
nonceHex <- jsonlite::fromJSON(input)$nonce
keyStr <- 'user_a'
private_key <- sha256(charToRaw(keyStr))
auth_private_key <- sha256(charToRaw('auth'))
auth_key <- pubkey(auth_private_key)
nonce <- as.raw(strtoi(sapply(
seq(1, nchar(nonceHex), by=2),
function(x) substr(nonceHex, x, x+1)), 16L))
cipher <- as.raw(strtoi(sapply(
seq(1, nchar(cipherHex), by=2),
function(x) substr(cipherHex, x, x+1)), 16L))
decrypted_message <- rawToChar(auth_decrypt(cipher, private_key, auth_key, nonce))
input <- '	{"value":"43043a352d75bd3b13e0b1dd730ad3817e5b5a6de7e93f4022a00d9f91fc4e7334e90a05f859ab025a1415a3f0ba39c6553001d8f8bf68f2010793c5e1c98f99ec3ad449f7d53b33179755ec315de9054e0ced6d537c54d487ff5999530dfcdd60e0fa6a39aad4c64fd6ee14141feaee90ecb3e42b6b8093938bfcff625cbaf5d2c82e03a390b913ed8950b970b73c60c665bf9aac18f6577d378c11fda8e40d4dc158f3a3bb531617a09611cb087012e42090fe309e87693929bc4c090c662b355b22939ef450548bf7fdb42092","nonce":"5e96726a37d1dd89c4cdefbfe4a247d823b20441ffec46b8","version":"0.4","id":73}'
cipherHex <- jsonlite::fromJSON(input)$value
nonceHex <- jsonlite::fromJSON(input)$nonce
keyStr <- 'user_a'
private_key <- sha256(charToRaw(keyStr))
auth_private_key <- sha256(charToRaw('auth'))
auth_key <- pubkey(auth_private_key)
nonce <- as.raw(strtoi(sapply(
seq(1, nchar(nonceHex), by=2),
function(x) substr(nonceHex, x, x+1)), 16L))
cipher <- as.raw(strtoi(sapply(
seq(1, nchar(cipherHex), by=2),
function(x) substr(cipherHex, x, x+1)), 16L))
decrypted_message <- rawToChar(auth_decrypt(cipher, private_key, auth_key, nonce))
input <- '{"value":"8337e9c68a2058d351b2ce891c3a46c72c1b2fb8d8aee0ca7d6e88ca05fe67c8682f18b9dc3a949b8d78eb2c6e7b5773328c6cb04a28340e1c0186b5facc3f012a13fec10d76401c1c6c4fb9ef802a7213933b25a216bbabe587490bf5da2b8250ed62da5f9ff31f7874be822e8872c13028d3694740693b9c558f0af04bc56b92aa928cdf27f6d643ae37868828eb3d6b20b01956533b408b8259903061e3b346c2a565f3ba3ac5148f086fae4e4d8fbbbbaa030676e6c2ab4e8327ce3c7f672c25e82e6896ac22ad472780071d9e0e79bb7eba4671911aabd2386f67d1fe0f98dcc90c9bb269e2c2dd05a19e4ff7e743f3743007984425f9fd65567bdc479847029acfc69b58676aede0118b429f649f571cf9aec321ac6431797bca40f45e4ea3a81cbd12df97d8fe92f7cc02528a7a77c106d76808a0c70081a5a3bdbf595c89a83c08fa4d11c944573709f7d9cb1b5ab64b6ed0c95638f64a49571563afba69bdafebba","nonce":"c3aeb5a9d901e6606e16500aaec77ff81c6f5b5c377626a8","version":"0.4","id":96}'
cipherHex <- jsonlite::fromJSON(input)$value
nonceHex <- jsonlite::fromJSON(input)$nonce
keyStr <- 'user_a'
private_key <- sha256(charToRaw(keyStr))
auth_private_key <- sha256(charToRaw('auth'))
auth_key <- pubkey(auth_private_key)
nonce <- as.raw(strtoi(sapply(
seq(1, nchar(nonceHex), by=2),
function(x) substr(nonceHex, x, x+1)), 16L))
cipher <- as.raw(strtoi(sapply(
seq(1, nchar(cipherHex), by=2),
function(x) substr(cipherHex, x, x+1)), 16L))
decrypted_message <- rawToChar(auth_decrypt(cipher, private_key, auth_key, nonce))
library(sodium)
raw2str <- function(key){
paste(as.character(key), collapse='')
}
str2raw <- function(str){
if(grepl("^[0-9a-f]+$", str, perl = TRUE)){
as.raw(strtoi(sapply(
seq(1, nchar(str), by=2),
function(x) substr(str, x, x+1)), 16L))
} else {
raw(0)
}
}
# Example 1 (Moto G5)
message1 <- '{"accuracy":20,"altitude":1,"latitude":15.4288967,"longitude":47.0700467,"speed":0,"timestamp":"2018-02-23T09:12:05.000Z","heading":0,"datum":"EPSG:4326"}'
msg1 <- charToRaw(message1)
nonce_str1 <- 'a441e2e80824285ad0d5465ca0701b1e7b1238a0c2bcd162'
nonce1 <- str2raw(nonce_str1)
public_key_str <- 'c2c45a740316583c8b1af013e24c66711590f1f1921cbc8ee2c8be9188b13731'
public_key <- str2raw(public_key_str)
nonce_str1 <- 'a441e2e80824285ad0d5465ca0701b1e7b1238a0c2bcd162'
nonce1 <- str2raw(nonce_str1)
public_key_str <- 'c2c45a740316583c8b1af013e24c66711590f1f1921cbc8ee2c8be9188b13731'
public_key <- str2raw(public_key_str)
authentication_key_str <- 'bdf49c3c3882102fc017ffb661108c63a836d065888a4093994398cc55c2ea2f'
authentication_key <- str2raw(authentication_key_str)
authentication_key_str <- 'bdf49c3c3882102fc017ffb661108c63a836d065888a4093994398cc55c2ea2f'
authentication_key <- str2raw(authentication_key_str)
cipher1 <- auth_encrypt(msg1, authentication_key, public_key, nonce1)
jsonlite::toJSON(list(
value = paste0(as.hexmode(as.integer(cipher1)), collapse = ''),
nonce = paste0(as.hexmode(as.integer(nonce1)), collapse = '')), auto_unbox = T)
input <- '{"value":"9289266f279996280ffd941da4585c1a408164c66897f2dacf0ccec8796f0d3660646aee30346eb7f55ce27e0fed602da4563886a00c244f858bb8fe79d930fd8b606473a72ee62ca4e70c89e43a7402a83211a0b039d99abb1d1bf55208ed74da6d4d8f17b3082888c8b6a6cab92953911fe32e9cd8beac698db97c7d375f330048515148b869bcdf204ed50f79a147151c27852d79de7c2f8b06651129b474681b02ca83bbc91b139d","nonce":"a441e2e80824285ad0d5465ca0701b1e7b1238a0c2bcd162","version":"0.4","id":96}'
cipherHex <- jsonlite::fromJSON(input)$value
nonceHex <- jsonlite::fromJSON(input)$nonce
keyStr <- 'user_a'
private_key <- sha256(charToRaw(keyStr))
auth_private_key <- sha256(charToRaw('auth'))
auth_key <- pubkey(auth_private_key)
nonce <- as.raw(strtoi(sapply(
seq(1, nchar(nonceHex), by=2),
function(x) substr(nonceHex, x, x+1)), 16L))
cipher <- as.raw(strtoi(sapply(
seq(1, nchar(cipherHex), by=2),
function(x) substr(cipherHex, x, x+1)), 16L))
decrypted_message <- rawToChar(auth_decrypt(cipher, private_key, auth_key, nonce))
auth_private_key <- sha256(charToRaw('auth'))
raw2str(auth_private_key)
auth_key <- pubkey(auth_private_key)
auth_key <- pubkey(auth_key)
auth_key <- pubkey(auth_private_key)
raw2str(auth_key)
auth_private_key <- sha256(charToRaw('auth'))
auth_key <- pubkey(auth_private_key)
raw2str(auth_key)
# Example 1 (Moto G5)
message1 <- '{"accuracy":20,"altitude":1,"latitude":15.4288967,"longitude":47.0700467,"speed":0,"timestamp":"2018-02-23T09:12:05.000Z","heading":0,"datum":"EPSG:4326"}'
msg1 <- charToRaw(message1)
raw2str(msg1)
x0 = raw2str(msg1)
x1 = "7b226163637572616379223a32302c22616c746974756465223a312c226c61746974756465223a31352e343238383936372c226c6f6e676974756465223a34372e303730303436372c227370656564223a302c2274696d657374616d70223a22323031382d30322d32335430393a31323a30352e3030305a222c2268656164696e67223a302c22646174756d223a22455053473a34333236227d"
x0 == x1
nonce_str1 <- 'c223fc5f513026f7bcf80b039d3d71f8bcc9f7de3b321a6b'
nonce1 <- str2raw(nonce_str1)
# Example 1 (Moto G5)
message1 <- '{"accuracy":20,"altitude":1,"latitude":15.4288967,"longitude":47.0700467,"speed":0,"timestamp":"2018-02-23T09:12:05.000Z","heading":0,"datum":"EPSG:4326"}'
msg1 <- charToRaw(message1)
nonce_str1 <- 'c223fc5f513026f7bcf80b039d3d71f8bcc9f7de3b321a6b'
nonce1 <- str2raw(nonce_str1)
public_key_str <- 'c2c45a740316583c8b1af013e24c66711590f1f1921cbc8ee2c8be9188b13731'
public_key <- str2raw(public_key_str)
authentication_key_str <- 'bdf49c3c3882102fc017ffb661108c63a836d065888a4093994398cc55c2ea2f'
authentication_key <- str2raw(authentication_key_str)
authentication_key_str <- 'bdf49c3c3882102fc017ffb661108c63a836d065888a4093994398cc55c2ea2f'
authentication_key <- str2raw(authentication_key_str)
cipher1 <- auth_encrypt(msg1, authentication_key, public_key, nonce1)
jsonlite::toJSON(list(
value = paste0(as.hexmode(as.integer(cipher1)), collapse = ''),
nonce = paste0(as.hexmode(as.integer(nonce1)), collapse = '')), auto_unbox = T)
# Example 2 (Simulator)
message2 <- '{"accuracy":20,"altitude":1,"latitude":15.4288967,"longitude":47.0700467,"speed":0,"timestamp":"2018-02-23T09:12:05.000Z","heading":0,"datum":"EPSG:4326"}'
msg2 <- charToRaw(message2)
raw2str(msg2)
nonce_str2 <- 'a441e2e80824285ad0d5465ca0701b1e7b1238a0c2bcd162'
nonce2 <- str2raw(nonce_str2)
jsonlite::toJSON(list(
value = paste0(as.hexmode(as.integer(cipher2)), collapse = ''),
nonce = paste0(as.hexmode(as.integer(nonce2)), collapse = '')), auto_unbox = T)
cipher2 <- auth_encrypt(msg2, authentication_key, public_key, nonce2)
jsonlite::toJSON(list(
value = paste0(as.hexmode(as.integer(cipher2)), collapse = ''),
nonce = paste0(as.hexmode(as.integer(nonce2)), collapse = '')), auto_unbox = T)
input <- '{"value":"bb73239ad0377aa81f88e69307feef6585d4ff4a99fbd0e8c18bcccc32fcb8613a2dd22c6aa21fb390e01f867fa159267c41dcde1cb3da73cf38f1d150271c7169b80648d5cce25a945b8090","nonce":"b0e34a3be717c095f2087dd995d5ffe663e68bbf831bdb71","version":"0.4","id":312}'
cipherHex <- jsonlite::fromJSON(input)$value
nonceHex <- jsonlite::fromJSON(input)$nonce
keyStr <- 'user_a'
private_key <- sha256(charToRaw(keyStr))
private_key <- sodium::sha256(charToRaw(keyStr))
auth_private_key <- sodium::sha256(charToRaw('auth'))
auth_key <- sodium::pubkey(auth_private_key)
nonce <- as.raw(strtoi(sapply(
seq(1, nchar(nonceHex), by=2),
function(x) substr(nonceHex, x, x+1)), 16L))
cipher <- as.raw(strtoi(sapply(
seq(1, nchar(cipherHex), by=2),
function(x) substr(cipherHex, x, x+1)), 16L))
decrypted_message <- rawToChar(sodium::auth_decrypt(cipher, private_key, auth_key, nonce))
input <- '{"value":"937a4c76c845cef337102df5dd21582f8717d883e9db5fa9272f7f7e9ab85265b73990a2d98d4979a879ef458ff8bd2eed4183f7b631c48ba7ee8a6123e8894634f0935bc4a575b64f52976f","nonce":"00ecfdd917873e72080735afe9b1e79113ef3ba255f4e0f9","version":"0.4","id":311}'
cipherHex <- jsonlite::fromJSON(input)$value
nonceHex <- jsonlite::fromJSON(input)$nonce
keyStr <- 'asdf123'
private_key <- sodium::sha256(charToRaw(keyStr))
auth_private_key <- sodium::sha256(charToRaw('auth'))
auth_key <- sodium::pubkey(auth_private_key)
nonce <- as.raw(strtoi(sapply(
seq(1, nchar(nonceHex), by=2),
function(x) substr(nonceHex, x, x+1)), 16L))
cipher <- as.raw(strtoi(sapply(
seq(1, nchar(cipherHex), by=2),
function(x) substr(cipherHex, x, x+1)), 16L))
decrypted_message <- rawToChar(sodium::auth_decrypt(cipher, private_key, auth_key, nonce))
input <- '{"value":"6e47fe1a9250ea36ab7c9e8ef49f0392e1ddc3817fe60adaa2b761ddfb1ae8061127ffd54b9e4dfa66f5b8fe30b4f4e971d9952288023cbfc9d3b93191ae90a6c6b9051c971f5665d603aded","nonce":"928ae2d8ad939bed8e30619a014cbd23562efafab58182d7","version":"0.4","id":128}'
cipherHex <- jsonlite::fromJSON(input)$value
nonceHex <- jsonlite::fromJSON(input)$nonce
keyStr <- 'user_a'
private_key <- sodium::sha256(charToRaw(keyStr))
auth_private_key <- sodium::sha256(charToRaw('auth'))
auth_key <- sodium::pubkey(auth_private_key)
nonce <- as.raw(strtoi(sapply(
seq(1, nchar(nonceHex), by=2),
function(x) substr(nonceHex, x, x+1)), 16L))
cipher <- as.raw(strtoi(sapply(
seq(1, nchar(cipherHex), by=2),
function(x) substr(cipherHex, x, x+1)), 16L))
decrypted_message <- rawToChar(sodium::auth_decrypt(cipher, private_key, auth_key, nonce))
decrypted_message
input <- '{"value":"a998e6abbd9d1fd4e40f6bdf6cf9be38e1c824f5f04ed2128b9bbc1a54192cfa64ff4de5c07af1d53627d455592186f72bfe40063d3d6bff43448be139f412f2f48ebdc630debcd0b3e2aa3c","nonce":"443ae2407841d5da2f9103faa0cc4223924214e2d58a844a","version":"0.4","id":129}'
cipherHex <- jsonlite::fromJSON(input)$value
nonceHex <- jsonlite::fromJSON(input)$nonce
keyStr <- 'user_a'
private_key <- sodium::sha256(charToRaw(keyStr))
auth_private_key <- sodium::sha256(charToRaw('auth'))
auth_key <- sodium::pubkey(auth_private_key)
nonce <- as.raw(strtoi(sapply(
seq(1, nchar(nonceHex), by=2),
function(x) substr(nonceHex, x, x+1)), 16L))
cipher <- as.raw(strtoi(sapply(
seq(1, nchar(cipherHex), by=2),
function(x) substr(cipherHex, x, x+1)), 16L))
decrypted_message <- rawToChar(sodium::auth_decrypt(cipher, private_key, auth_key, nonce))
decrypted_message
library(oydapp)
library(oydapp)
library(oydapp)
library(oydapp)
library(oydapp)
library(oydapp)
library(oydapp)
library(oydapp)
library(oydapp)
library(oydapp)
library(oydapp)
library(oydapp)
library(oydapp)
library(oydapp)
library(oydapp)
library(oydapp)
library(oydapp)
sodium::sha256(charToRaw("asdf123"))
privateKey <- sodium::sha256(charToRaw("asdf123"))
sodium::pubkey(privateKey)
library(oydapp)
sodium::pubkey('asdf123')
privateKey <- sodium::sha256(charToRaw("asdf123"))
privateKey
p1 <- privateKey
p1 == privateKey
all.equal(p1 == privateKey)
all(p1 == privateKey)
library(oydapp)
library(oydapp)
library(oydapp)
library(oydapp)
library(oydapp)
library(oydapp)
library(oydapp)
library(oydapp)
library(oydapp)
library(oydapp)
library(oydapp)
library(oydapp)
library(oydapp)
library(oydapp)
source('~/oyd/base/oydapp/R/srvBase.R')
app <- setupApp("http://192.168.178.21:3000", "3b6f48297fa85e6f3f1d36f73bd84bf426ba38c029fccf40e91617805a43a0ca", "029d3575b4af623faa23556011c9ba3d925d258017d7fcaa8e13bd296fc0edb7", "")
app
headers <- defaultHeaders(app$token)
plugins_url <- paste0(app$url, '/api/apps/index')
header <- RCurl::basicHeaderGatherer()
response <- tryCatch(
RCurl::getURI(plugins_url,
.opts=list(httpheader = headers),
headerfunction = header$update),
error = function(e) { return(NA) })
response
response <- tryCatch(
RCurl::getURI(plugins_url,
.opts=list(httpheader = headers),
headerfunction = header$update),
error = function(e) { return(NA) })
response <- tryCatch(
RCurl::getURI(plugins_url,
.opts=list(httpheader = headers),
headerfunction = header$update),
error = function(e) { return(NA) })
response <- tryCatch(
RCurl::getURI(plugins_url,
.opts=list(httpheader = headers),
headerfunction = header$update),
error = function(e) { return(NA) })
response
jsonlite::validate(response[1])
plugins <- as.data.frame(jsonlite::fromJSON(response))
View(plugins)
plugins[plugins$uid == app$app_key, 'plugin_id']
plugins$uid
app$app_key
headers <- defaultHeaders(app$token)
plugins_url <- paste0(app$url, '/api/plugins/index')
header <- RCurl::basicHeaderGatherer()
response <- tryCatch(
RCurl::getURI(plugins_url,
.opts=list(httpheader = headers),
headerfunction = header$update),
error = function(e) { return(NA) })
plugins <- as.data.frame(jsonlite::fromJSON(response))
is.na(response)
header$value()[['status']]
plugins <- as.data.frame(jsonlite::fromJSON(response))
View(plugins)
plugins[plugins$uid == app$app_key, 'plugin_id']
plugins[plugins$uid == app$app_key, 'id']
x <- { asdf: "asdf", qwer: "qwer"}
x <- list(asdf: "123")
x <- list("asdf": "123")
x
item <- list(plugin_id  = plugin_id,
identifier = identifier,
command    = command,
schedule   = schedule)
app
source('~/oyd/base/oydapp/R/srvBase.R')
createTask(app, 'oyd.report.temp', 'echo "hello world"', 'delete')
createTask <- function(app, identifier, command, schedule){
headers <- defaultHeaders(app$token)
task_url <- paste0(app$url, '/api/tasks/create')
item <- list(identifier = identifier,
command    = command,
schedule   = schedule)
data <- jsonlite::toJSON(item, auto_unbox = TRUE)
response <- tryCatch(
httr::POST(task_url,
body = data,
encode = 'json',
httr::add_headers(.headers = headers)),
error = function(e) {
return(e) })
}
createTask(app, 'oyd.report.temp', 'echo "hello world"', 'delete')
createTask(app, 'oyd.report.temp', 'echo "hello world"', 'delete')
createTask(app, 'oyd.report.temp', 'echo "hello world"', 'delete')
cmd <- 'echo "hello world"'
base64enc::base64encode(cmd)
base64encode('asdf')
jsonlite::base64_enc('asef')
library(oydapp)
app$url
library(oydapp)
library(oydapp)
